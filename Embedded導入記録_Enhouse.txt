2. 環境構築の概要（詳細版）
Pythonスクリプトを複数の端末で確実に動作させるために、以下の環境を構築しました。本セクションでは、それぞれの構成要素について具体的な内容を説明します。

・Python実行環境の準備
Pythonを各端末でインストールせずに実行できるよう、Pythonの埋め込み実行環境（Python Embedded） を使用しました。これにより、Pythonのバージョン依存や環境設定の問題を回避し、どのPCでも統一した環境で動作するようにしました。

実施内容
フォルダ構成

Enhause進捗Report フォルダを作成し、その中に Python実行環境 フォルダを配置。
Python Embedded のセットアップ

Python公式サイトから Windows embeddable package をダウンロード。
Python実行環境 フォルダ内に解凍。
ライブラリの導入

Lib および Lib/site-packages フォルダに、必要なライブラリを配置。
pip コマンドはデフォルトで含まれていないため、手動で site-packages に必要なパッケージをコピー。
Pythonの動作確認

コマンドプロンプトで以下を実行し、Pythonが正常に動作することを確認。
sh
コードをコピーする
C:\Enhause進捗Report\Python実行環境\python.exe --version
python313._pth ファイルの編集

python313._pth ファイルを開き、以下を追記し、パス設定を行う：
python
コードをコピーする
python313.zip
.
Lib
Lib/site-packages
# Uncomment to run site.main() automatically
import site
環境変数の不要化

.pth ファイルを正しく設定することで PYTHONHOME などの環境変数設定を不要にし、どのPCでも簡単に動作するようにした。
・Pythonスクリプトの配置
Pythonスクリプトを整理し、管理しやすくするために、専用フォルダ Pythonファイル一式 を作成 し、すべてのスクリプトを格納しました。

実施内容
フォルダ作成

Enhause進捗Report フォルダ内に Pythonファイル一式 を作成。
Pythonスクリプトの格納

Pythonファイル一式 内に、以下のスクリプトを配置。
Enhouse_01_広告枠ID取得とCSV出力.py
Enhouse_02_CSVデータをスプレッドシートにアップロード.py
Enhouse_03_異常値削除.py
Enhouse_04_行と関数の自動追加.py
それぞれのスクリプトが、Excelの読み込み・データ加工・スプレッドシートアップロード・データチェック を行う仕様。
Excelファイルの配置

スクリプト実行時に Enhause進捗Report 内に Enhance_広告枠検索対象.xlsx を配置し、スクリプトと同じ階層に設置することで、ファイルパスの問題を回避。
スクリプトの動作確認

Pythonを使用して、各スクリプトが正常に動作するかテスト実行。
sh
コードをコピーする
C:\Enhause進捗Report\Python実行環境\python.exe C:\Enhause進捗Report\Pythonファイル一式\Enhouse_01_広告枠ID取得とCSV出力.py
・バッチファイル（.bat）の作成
Windows上でPythonスクリプトを 順番に自動実行 し、処理結果をログとして記録するために、バッチファイル Enhouse進捗レポート実行.bat を作成しました。

実施内容
Enhouse進捗レポート実行.bat の作成

Pythonファイル一式 内のスクリプトを順番に実行。
実行結果を log.txt に記録。
実行ごとに3分の待機処理を挿入し、エンターキーでスキップできる仕組みを導入。
バッチファイルのコード

bat
コードをコピーする
@echo off
cd /d %~dp0

set PYTHON_HOME=%~dp0Python実行環境
set SCRIPT_DIR=%~dp0Pythonファイル一式
set LOG_FILE=%~dp0log.txt

echo [%DATE% %TIME%] スクリプト開始 > "%LOG_FILE%"

for %%S in (
    "Enhouse_01_広告枠ID取得とCSV出力.py"
    "Enhouse_02_CSVデータをスプレッドシートにアップロード.py"
    "Enhouse_03_異常値削除.py"
    "Enhouse_04_行と関数の自動追加.py"
) do (
    echo [INFO] %%S を実行中...
    echo [%DATE% %TIME%] %%S 実行 >> "%LOG_FILE%"
    "%PYTHON_HOME%\python.exe" "%SCRIPT_DIR%\%%S" >> "%LOG_FILE%" 2>&1
    echo [INFO] %%S 完了
    echo [INFO] 3分待機中（エンターを押すとスキップ可）
    for /L %%i in (1,1,180) do (
        choice /c 1 /n /t 1 /d 1 >nul
    )
    echo [INFO] 3分待機完了
)

echo [%DATE% %TIME%] スクリプト終了 >> "%LOG_FILE%"
exit
・自動実行の設定
Windowsのタスクスケジューラを使用 し、バッチファイルを毎日自動実行 するよう設定しました。

実施内容
タスクスケジューラの起動

Win + R を押し、taskschd.msc を入力してタスクスケジューラを開く。
新しいタスクの作成

「基本タスクの作成」 を選択。
名前に 「Enhause進捗レポート実行」 を入力。
スケジュールの設定

実行頻度を「毎日」に設定。
実行時刻を適切なタイミングに設定。
プログラムの設定

「操作」 のステップで Enhouse進捗レポート実行.bat を指定。
実行権限の設定

「最上位の特権で実行する」 にチェックを入れ、管理者権限で実行可能にする。
動作確認

タスクスケジューラ上で「今すぐ実行」をクリックし、正常に動作するか確認。
まとめ
上記の環境構築手順により、Pythonスクリプトをどの端末でも確実に動作させ、自動実行できる環境を整備 しました。また、ログ記録機能を追加することで、実行結果の確認やデバッグが容易になりました。

この環境を導入することで、スクリプトの管理が一元化され、手動実行の手間が省け、エラー発生時の対処も迅速化できます。


----------------------------------------------------

3. 詳細な導入手順（詳細版）
3.1.フォルダの配置
Pythonスクリプトと実行環境を整理し、どの端末でも統一した形で動作するように、フォルダ構成を決定しました。スクリプトとPython環境を分離し、管理しやすくすることで、環境構築を容易にしました。

(1)フォルダの作成
・Enhause進捗Reportフォルダを作成。
・その中に以下のフォルダを配置。
・Python実行環境/（Pythonの埋め込み環境を格納）
・Pythonファイル一式/（実行するPythonスクリプトを格納）

(2)フォルダ構成
lua
コードをコピーする
Enhause進捗Report/
├── Python実行環境/（Pythonの埋め込み環境）
├── Pythonファイル一式/（実行するPythonスクリプト）
├── Enhouse進捗レポート実行.bat（実行用バッチファイル）
├── log.txt（実行ログ）
(3)スクリプトの配置
・Pythonファイル一式/に、以下のPythonスクリプトを配置。
・Enhouse_01_広告枠ID取得とCSV出力.py
・Enhouse_02_CSVデータをスプレッドシートにアップロード.py
・Enhouse_03_異常値削除.py
・Enhouse_04_行と関数の自動追加.py

3.2.Python実行環境の準備
各端末でPythonをインストールする手間を省くため、**Pythonの埋め込み実行環境（Python Embedded）**を導入しました。これにより、Pythonのバージョン依存や環境設定の不整合を防ぎ、どこでも統一した環境で実行可能になります。

(1)Python Embeddedのダウンロード
・Python公式サイト（https://www.python.org/downloads/windows/）から**Windows embeddable package**をダウンロード。
・Python実行環境/フォルダ内に解凍。

(2)ライブラリの追加
・LibおよびLib/site-packagesに、スクリプトで必要なパッケージを手動で配置。
・pipを使用できるように設定し、追加のパッケージが必要な場合は以下のようにインストール：

sh
コードをコピーする
C:\Enhause進捗Report\Python実行環境\python.exe -m ensurepip
C:\Enhause進捗Report\Python実行環境\python.exe -m pip install openpyxl pandas selenium
(3)設定ファイルの編集
・python313._pthファイルを開き、以下の内容を追記：

python
コードをコピーする
python313.zip
.
Lib
Lib/site-packages
# Uncomment to run site.main() automatically
import site
・この設定により、環境変数PYTHONHOMEを設定せずにPythonが動作するようにする。

(4)Pythonの動作確認
・コマンドプロンプトまたはPowerShellで以下を実行し、Pythonが正常に動作するか確認：

sh
コードをコピーする
C:\Enhause進捗Report\Python実行環境\python.exe --version
・また、以下のコマンドを実行し、スクリプト実行が可能か確認：

sh
コードをコピーする
C:\Enhause進捗Report\Python実行環境\python.exe C:\Enhause進捗Report\Pythonファイル一式\Enhouse_01_広告枠ID取得とCSV出力.py
3.3.バッチファイルの作成
Pythonスクリプトを自動実行し、ログを記録するためのバッチファイルEnhouse進捗レポート実行.batを作成しました。

(1)バッチファイルの目的
・Pythonファイル一式内のPythonスクリプトを順番に実行。
・実行結果をlog.txtに記録。
・各スクリプトの実行後、3分の待機処理を挿入（エンターキーでスキップ可能）。

(2)バッチファイルのコード
bat
コードをコピーする
@echo off
cd /d %~dp0

set PYTHON_HOME=%~dp0Python実行環境
set SCRIPT_DIR=%~dp0Pythonファイル一式
set LOG_FILE=%~dp0log.txt

echo [%DATE% %TIME%] スクリプト開始 > "%LOG_FILE%"

for %%S in (
    "Enhouse_01_広告枠ID取得とCSV出力.py"
    "Enhouse_02_CSVデータをスプレッドシートにアップロード.py"
    "Enhouse_03_異常値削除.py"
    "Enhouse_04_行と関数の自動追加.py"
) do (
    echo [INFO] %%S を実行中...
    echo [%DATE% %TIME%] %%S 実行 >> "%LOG_FILE%"
    "%PYTHON_HOME%\python.exe" "%SCRIPT_DIR%\%%S" >> "%LOG_FILE%" 2>&1
    echo [INFO] %%S 完了
    echo [INFO] 3分待機中（エンターを押すとスキップ可）
    for /L %%i in (1,1,180) do (
        choice /c 1 /n /t 1 /d 1 >nul
    )
    echo [INFO] 3分待機完了
)

echo [%DATE% %TIME%] スクリプト終了 >> "%LOG_FILE%"
exit
3.4.タスクスケジューラの設定
Pythonスクリプトを毎日自動実行するために、Windowsのタスクスケジューラを使用しました。

(1)タスクスケジューラの起動
・Win + Rを押し、taskschd.mscを入力してタスクスケジューラを開く。

(2)新しいタスクの作成
・**「基本タスクの作成」を選択。
・名前に「Enhause進捗レポート実行」**を入力。

(3)スケジュールの設定
・実行頻度を「毎日」に設定。
・実行時刻を適切なタイミングに設定。

(4)プログラムの設定
・**「操作」のステップでEnhouse進捗レポート実行.bat**を指定。

(5)実行権限の設定
・**「最上位の特権で実行する」**にチェックを入れ、管理者権限で実行可能にする。

(6)動作確認
・タスクスケジューラ上で「今すぐ実行」をクリックし、正常に動作するか確認。

まとめ
この手順により、Pythonスクリプトをどの端末に配置しても動作する環境を構築し、自動実行できる状態にしました。また、ログ記録の仕組みを追加し、エラー発生時のデバッグを容易にしました。

この環境を導入することで、スクリプトの管理が一元化され、手動実行の手間が省け、エラー発生時の対処も迅速化できます。
----------------------------------------
4. 問題点と改善策
4.1.Pythonのパス設定エラー
(1)問題点
・Pythonの実行環境を構築する際に、環境変数PYTHONHOMEが適切に設定されていない場合、Pythonが正しく動作しない。
・特に埋め込み環境（Embedded Python）を使用する場合、PYTHONHOMEの設定が不要なはずなのに、手動で設定してしまうと予期しないエラーが発生する可能性がある。

(2)原因
・環境変数PYTHONHOMEの設定ミスにより、Pythonが必要なライブラリやモジュールを適切に参照できなくなる。
・特定の端末では、システム環境変数に影響を受け、import encodingsやimport siteなどの基本モジュールのロードに失敗することがある。

(3)改善策
・Pythonの埋め込み環境を適切に動作させるため、PYTHONHOMEの設定を不要にする。
・python313._pthファイルを編集し、以下のように環境変数なしでも正しく動作するようにする。

修正方法
・python313._pthに以下を記述：

python
コードをコピーする
python313.zip
.
Lib
Lib/site-packages
# Uncomment to run site.main() automatically
import site
・この設定により、環境変数を設定しなくてもPythonの必要なパスが正しく解決される。
・また、unset PYTHONHOMEおよびunset PYTHONPATHをバッチファイルの実行前に適用することで、環境変数の影響を受けないようにする。

4.2.Excelファイルの読み込みエラー
(1)問題点
・スクリプト実行時に、必要なExcelファイルが見つからないと、FileNotFoundErrorが発生し、処理が途中で停止する。
・Excelファイルの場所がスクリプトと異なるフォルダに配置されている場合、Pythonのopenpyxl.load_workbook()がファイルを正しく開けない。

(2)原因
・スクリプトが参照するExcelファイルが、指定されたフォルダに存在しない。
・「Pythonファイル」というフォルダ名で管理していたが、「Pythonファイル一式」に変更したことで動作するようになった。
・スクリプトが特定のディレクトリパスを参照していたため、フォルダ名の変更が影響した可能性がある。

(3)改善策
・スクリプトとExcelファイルを同じフォルダに配置し、常に正しいパスを参照するようにする。
・フォルダ名を統一し、「Pythonファイル一式」という名称を使用するようルール化。
・スクリプトの配置を変更する際には、フォルダ名が適切に設定されていることを事前に確認する。

修正方法
・フォルダ構成を以下のように統一：

lua
コードをコピーする
Enhause進捗Report/
├── Python実行環境/  （Pythonの埋め込み環境）
├── Pythonファイル一式/  （実行するPythonスクリプト）
│   ├── Enhance_広告枠検索対象.xlsx  （必要なExcelファイル）
│   ├── Enhouse_01_広告枠ID取得とCSV出力.py
│   ├── Enhouse_02_CSVデータをスプレッドシートにアップロード.py
│   ├── Enhouse_03_異常値削除.py
│   ├── Enhouse_04_行と関数の自動追加.py
├── Enhouse進捗レポート実行.bat （実行用バッチファイル）
├── log.txt （実行ログ）
・この構成を維持することで、スクリプトが適切にExcelファイルを読み込むようになる。

4.3.実行中の待機時間が長い
(1)問題点
・スクリプトの各処理の間に3分（180秒）の待機時間が設定されており、スクリプトの完了までに時間がかかる。
・待機時間をスキップできないため、デバッグや手動実行時にストレスがかかる。

(2)原因
・バッチファイルでtimeout /t 180を使用して待機しているため、手動でスキップすることができない。
・timeoutコマンドは強制的に時間を経過させるだけで、ユーザーがスキップする手段を提供しない。

(3)改善策
・choiceコマンドを使用し、エンターキーを押すことで待機時間をスキップできるようにする。
・バッチファイルを以下のように修正し、180秒待機中でも、エンターキーを押すと次の処理に進むようにする。

修正方法
bat
コードをコピーする
echo [INFO] 3分待機中（エンターを押すとスキップ可）
for /L %%i in (1,1,180) do (
    choice /c 1 /n /t 1 /d 1 >nul
)
echo [INFO] 3分待機完了
・このコードにより、3分待機中にエンターキーを押すと即座に次の処理へ移行する。
・待機が不要な場合に即座にスキップできるため、手動実行時の効率が向上する。

まとめ
この改善策を実施することで、以下の3つの問題点を解決した。

(1)Pythonのパス設定エラー → .pthファイルの編集により、環境変数の設定ミスを防止。
(2)Excelファイルの読み込みエラー → フォルダ名を「Pythonファイル一式」に統一することで解決。
(3)実行中の待機時間が長い → choiceコマンドを利用し、エンターキーで待機時間をスキップ可能に。

これにより、スクリプトの実行がより安定し、効率的に運用できるようになった。